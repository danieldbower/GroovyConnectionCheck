apply plugin: 'eclipse'
apply plugin: 'groovy'

version = '0.1-SNAPSHOT'
group = 'com.bowerstudios.connectioncheck'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

manifest.mainAttributes("Main-Class" : "com.ecommerce.Application",
                                            'Provider': group,
                                            'Implementation-Version': version,
                                            'Built-With': ('gradle-' + new GradleVersion().getVersion()),
                                            'Class-Path': '.'
                                            )

repositories {
    mavenCentral()
}

configurations {
    compile
    runtime
    sshAntTask
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.2'
    testCompile group: 'junit', name: 'junit', version: '4.7'
    testCompile group: 'org.easymock', name: 'easymock', version: '2.0'
   
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.12'
    
    //logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.5.11'
    runtime group: 'ch.qos.logback', name: 'logback-core', version: '0.9.20'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '0.9.20'
    
    sshAntTask 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'
}

task cleanDist << {
    ant.echo(message: "Cleaning dist directory:  ${project.projectDir}/dist/")
    ant.delete (verbose: true){
        fileset(dir: "${project.projectDir}/dist/", includes: "**/*.jar")
        fileset(dir: "${project.projectDir}/dist/logs/", includes: "**/*.log")
    }
} 

task dist(dependsOn: [build, cleanDist])  << {
    //copy dependencies
    copy {
        from configurations.runtime
        from configurations.default.allArtifacts*.file
        into new File(project.projectDir, 'dist')
    }
}

task deploy(dependsOn: dist) << {
    description = 'deploy dist dir to remote server.'
     
    def destServer = 'bowerstudios.com'
    def destUser = 'daniel'
    def destPath = '/home/daniel/connectionCheck/'
    def keyfileLocation = '${user.home}/.ssh/id_rsa'
    def deployDir = (project.projectDir.path + "/dist")
    
    ant.echo(message:deployDir)
 
    // Get passphrase from user input.
    def console = System.console()
    def passphrase = console.readPassword('%s: ', 'Please enter the passphrase for your ssh keyfile')
         
    // When moving files to destination, rename old config files to .old before copying new files out

    // add scp as a valid ant task
    ant.taskdef(
        name: 'scp', 
        classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
        classpath: configurations.sshAntTask.asPath
        )
    // add sshexec as a valid ant task
    ant.taskdef(
        name: 'sshexec',
        classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
        classpath: configurations.sshAntTask.asPath
    )

    ant.sshexec(
        host: destServer,
        username: destUser, 
        keyfile: keyfileLocation,
        passphrase: passphrase as String,
        verbose:true,
        command: "rm -R ${destPath}/*.jar",
        failonerror: false
    )
    
    ant.scp(
        todir: "${destUser}@${destServer}:${destPath}",
        keyfile: keyfileLocation,
        passphrase: passphrase as String,
        verbose: 'true'
        ) {
            fileset(dir: deployDir) {
                include(name:'**.jar')
            }
    }
    
    ant.echo(message: "Double check the properties files to be sure no new properties exist.  This deploy ONLY replaces all the jar files in the directory.  Nothing further is touched")
}


